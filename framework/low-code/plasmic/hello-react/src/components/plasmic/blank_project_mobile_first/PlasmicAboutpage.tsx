// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vhuvvwRnfW9WJhUtwQYjKc
// Component: CNOwlFxo8A

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_blank_project_mobile_first.module.css'; // plasmic-import: vhuvvwRnfW9WJhUtwQYjKc/projectcss
import sty from './PlasmicAboutpage.module.css'; // plasmic-import: CNOwlFxo8A/css

export type PlasmicAboutpage__VariantMembers = {};
export type PlasmicAboutpage__VariantsArgs = {};
type VariantPropType = keyof PlasmicAboutpage__VariantsArgs;
export const PlasmicAboutpage__VariantProps = new Array<VariantPropType>();

export type PlasmicAboutpage__ArgsType = {};
type ArgPropType = keyof PlasmicAboutpage__ArgsType;
export const PlasmicAboutpage__ArgProps = new Array<ArgPropType>();

export type PlasmicAboutpage__OverridesType = {
  root?: p.Flex<'div'>;
  text?: p.Flex<'div'>;
};

export interface DefaultAboutpageProps {
  className?: string;
}

const __wrapUserFunction = globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAboutpage__RenderFunc(props: {
  variants: PlasmicAboutpage__VariantsArgs;
  args: PlasmicAboutpage__ArgsType;
  overrides: PlasmicAboutpage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const [isTextActive, triggerTextActiveProps] = useTrigger('usePressed', {});
  const triggers = {
    active_text: isTextActive,
  };

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={'text'}
            data-plasmic-override={overrides.text}
            className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
            data-plasmic-trigger-props={[triggerTextActiveProps]}
          >
            {triggers.active_text ? 'Enter some text123123' : 'Enter some text'}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'text'],
  text: ['text'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  text: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAboutpage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAboutpage__VariantsArgs;
    args?: PlasmicAboutpage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAboutpage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<PlasmicAboutpage__ArgsType, ReservedPropsType> &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAboutpage__ArgProps,
          internalVariantPropNames: PlasmicAboutpage__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicAboutpage__RenderFunc({ variants, args, overrides, forNode: nodeName });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicAboutpage';
  } else {
    func.displayName = `PlasmicAboutpage.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutpage = Object.assign(
  // Top-level PlasmicAboutpage renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent('text'),

    // Metadata about props expected for PlasmicAboutpage
    internalVariantProps: PlasmicAboutpage__VariantProps,
    internalArgProps: PlasmicAboutpage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: '',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  }
);

export default PlasmicAboutpage;
/* prettier-ignore-end */
