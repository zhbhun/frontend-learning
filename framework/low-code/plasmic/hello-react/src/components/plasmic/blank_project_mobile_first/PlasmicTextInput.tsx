// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vhuvvwRnfW9WJhUtwQYjKc
// Component: S9SamH4fb08

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import * as pp from '@plasmicapp/react-web';
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_blank_project_mobile_first.module.css'; // plasmic-import: vhuvvwRnfW9WJhUtwQYjKc/projectcss
import sty from './PlasmicTextInput.module.css'; // plasmic-import: S9SamH4fb08/css

import SearchsvgIcon from './icons/PlasmicIcon__Searchsvg'; // plasmic-import: DFXYbBfFirG/icon
import ChecksvgIcon from './icons/PlasmicIcon__Checksvg'; // plasmic-import: 60hG1AK21fg/icon

export type PlasmicTextInput__VariantMembers = {
  showStartIcon: 'showStartIcon';
  showEndIcon: 'showEndIcon';
  isDisabled: 'isDisabled';
  color: 'dark';
};
export type PlasmicTextInput__VariantsArgs = {
  showStartIcon?: SingleBooleanChoiceArg<'showStartIcon'>;
  showEndIcon?: SingleBooleanChoiceArg<'showEndIcon'>;
  isDisabled?: SingleBooleanChoiceArg<'isDisabled'>;
  color?: SingleChoiceArg<'dark'>;
};
type VariantPropType = keyof PlasmicTextInput__VariantsArgs;
export const PlasmicTextInput__VariantProps = new Array<VariantPropType>(
  'showStartIcon',
  'showEndIcon',
  'isDisabled',
  'color'
);

export type PlasmicTextInput__ArgsType = {
  placeholder?: string;
  endIcon?: React.ReactNode;
  startIcon?: React.ReactNode;
  value?: string;
  name?: string;
  required?: boolean;
  'aria-label'?: string;
  'aria-labelledby'?: string;
};
type ArgPropType = keyof PlasmicTextInput__ArgsType;
export const PlasmicTextInput__ArgProps = new Array<ArgPropType>(
  'placeholder',
  'endIcon',
  'startIcon',
  'value',
  'name',
  'required',
  'aria-label',
  'aria-labelledby'
);

export type PlasmicTextInput__OverridesType = {
  root?: p.Flex<'div'>;
  startIconContainer?: p.Flex<'div'>;
  input?: p.Flex<'input'>;
  endIconContainer?: p.Flex<'div'>;
};

export interface DefaultTextInputProps extends pp.BaseTextInputProps {
  placeholder?: string;
  value?: string;
  name?: string;
  required?: boolean;
  'aria-label'?: string;
  'aria-labelledby'?: string;
  color?: SingleChoiceArg<'dark'>;
}

const __wrapUserFunction = globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicTextInput__RenderFunc(props: {
  variants: PlasmicTextInput__VariantsArgs;
  args: PlasmicTextInput__ArgsType;
  overrides: PlasmicTextInput__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          placeholder: 'Enter somethingâ€¦' as const,
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: 'showStartIcon',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showStartIcon,
      },
      {
        path: 'showEndIcon',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showEndIcon,
      },
      {
        path: 'isDisabled',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled,
      },
      {
        path: 'color',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color,
      },
      {
        path: 'value',
        type: 'writable',
        variableType: 'text',

        valueProp: 'value',
        onChangeProp: 'onChange',
      },
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] = useTrigger(
    'useFocusVisibleWithin',
    {
      isTextInput: true,
    }
  );
  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin,
  };

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        {
          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.rootcolor_dark]: hasVariant($state, 'color', 'dark'),
          [sty.rootisDisabled]: hasVariant($state, 'isDisabled', 'isDisabled'),
          [sty.rootshowStartIcon]: hasVariant($state, 'showStartIcon', 'showStartIcon'),
        }
      )}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      {(hasVariant($state, 'showStartIcon', 'showStartIcon') ? true : true) ? (
        <div
          data-plasmic-name={'startIconContainer'}
          data-plasmic-override={overrides.startIconContainer}
          className={classNames(projectcss.all, sty.startIconContainer, {
            [sty.startIconContainer___focusVisibleWithin]: triggers.focusVisibleWithin_root,
            [sty.startIconContainercolor_dark]: hasVariant($state, 'color', 'dark'),
            [sty.startIconContainerisDisabled]: hasVariant($state, 'isDisabled', 'isDisabled'),
            [sty.startIconContainershowStartIcon]: hasVariant(
              $state,
              'showStartIcon',
              'showStartIcon'
            ),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <SearchsvgIcon className={classNames(projectcss.all, sty.svg__wvlnm)} role={'img'} />
            ),

            value: args.startIcon,
            className: classNames(sty.slotTargetStartIcon, {
              [sty.slotTargetStartIconcolor_dark]: hasVariant($state, 'color', 'dark'),
              [sty.slotTargetStartIconshowStartIcon]: hasVariant(
                $state,
                'showStartIcon',
                'showStartIcon'
              ),
            }),
          })}
        </div>
      ) : null}
      <input
        data-plasmic-name={'input'}
        data-plasmic-override={overrides.input}
        aria-label={args['aria-label']}
        aria-labelledby={args['aria-labelledby']}
        className={classNames(projectcss.all, projectcss.input, sty.input, {
          [sty.input___focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.inputcolor_dark]: hasVariant($state, 'color', 'dark'),
          [sty.inputisDisabled]: hasVariant($state, 'isDisabled', 'isDisabled'),
          [sty.inputshowStartIcon]: hasVariant($state, 'showStartIcon', 'showStartIcon'),
        })}
        disabled={hasVariant($state, 'isDisabled', 'isDisabled') ? true : undefined}
        name={args.name}
        placeholder={args.placeholder}
        ref={(ref) => {
          $refs['input'] = ref;
        }}
        required={args.required}
        type={'text' as const}
        value={args.value}
      />

      {(hasVariant($state, 'showEndIcon', 'showEndIcon') ? true : true) ? (
        <div
          data-plasmic-name={'endIconContainer'}
          data-plasmic-override={overrides.endIconContainer}
          className={classNames(projectcss.all, sty.endIconContainer, {
            [sty.endIconContainercolor_dark]: hasVariant($state, 'color', 'dark'),
            [sty.endIconContainershowEndIcon]: hasVariant($state, 'showEndIcon', 'showEndIcon'),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <ChecksvgIcon className={classNames(projectcss.all, sty.svg___927Vi)} role={'img'} />
            ),

            value: args.endIcon,
            className: classNames(sty.slotTargetEndIcon, {
              [sty.slotTargetEndIconcolor_dark]: hasVariant($state, 'color', 'dark'),
              [sty.slotTargetEndIconshowEndIcon]: hasVariant($state, 'showEndIcon', 'showEndIcon'),
            }),
          })}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.BaseTextInputProps>(props: P, ref: pp.TextInputRef) {
  return pp.useTextInput<P, typeof PlasmicTextInput>(
    PlasmicTextInput,
    props,
    {
      showStartIconVariant: { group: 'showStartIcon', variant: 'showStartIcon' },
      showEndIconVariant: { group: 'showEndIcon', variant: 'showEndIcon' },
      isDisabledVariant: { group: 'isDisabled', variant: 'isDisabled' },
      startIconSlot: 'startIcon',
      endIconSlot: 'endIcon',
      root: 'root',
      input: 'input',
    },
    ref
  );
}

const PlasmicDescendants = {
  root: ['root', 'startIconContainer', 'input', 'endIconContainer'],
  startIconContainer: ['startIconContainer'],
  input: ['input'],
  endIconContainer: ['endIconContainer'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  startIconContainer: 'div';
  input: 'input';
  endIconContainer: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTextInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTextInput__VariantsArgs;
    args?: PlasmicTextInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTextInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<PlasmicTextInput__ArgsType, ReservedPropsType> &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTextInput__ArgProps,
          internalVariantPropNames: PlasmicTextInput__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicTextInput__RenderFunc({ variants, args, overrides, forNode: nodeName });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicTextInput';
  } else {
    func.displayName = `PlasmicTextInput.${nodeName}`;
  }
  return func;
}

export const PlasmicTextInput = Object.assign(
  // Top-level PlasmicTextInput renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    startIconContainer: makeNodeComponent('startIconContainer'),
    input: makeNodeComponent('input'),
    endIconContainer: makeNodeComponent('endIconContainer'),

    // Metadata about props expected for PlasmicTextInput
    internalVariantProps: PlasmicTextInput__VariantProps,
    internalArgProps: PlasmicTextInput__ArgProps,

    useBehavior,
  }
);

export default PlasmicTextInput;
/* prettier-ignore-end */
